from flask import Flask, request, jsonify
import uuid
import json
import logging
from datetime import datetime

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# In-memory storage for conversations and messages
conversations = {}
messages = {}

@app.route("/api/mcp/v1/conversations", methods=["POST"])
def create_conversation():
    conversation_id = str(uuid.uuid4())
    conversations[conversation_id] = {
        "id": conversation_id,
        "created_at": datetime.now().isoformat(),
        "updated_at": datetime.now().isoformat(),
        "title": "New Conversation",
        "metadata": {}
    }
    
    logging.info(f"Created conversation: {conversation_id}")
    return jsonify(conversations[conversation_id]), 201

@app.route("/api/mcp/v1/conversations", methods=["GET"])
def list_conversations():
    return jsonify(list(conversations.values())), 200

@app.route("/api/mcp/v1/conversations/<conversation_id>", methods=["GET"])
def get_conversation(conversation_id):
    if conversation_id not in conversations:
        return jsonify({"error": "Conversation not found"}), 404
    
    return jsonify(conversations[conversation_id]), 200

@app.route("/api/mcp/v1/conversations/<conversation_id>/messages", methods=["POST"])
def create_message(conversation_id):
    if conversation_id not in conversations:
        return jsonify({"error": "Conversation not found"}), 404
    
    data = request.get_json()
    
    # Validate request
    if "role" not in data or "content" not in data:
        return jsonify({"error": "Missing required fields"}), 400
    
    message_id = str(uuid.uuid4())
    messages[message_id] = {
        "id": message_id,
        "conversation_id": conversation_id,
        "created_at": datetime.now().isoformat(),
        "role": data["role"],
        "content": data["content"],
        "metadata": data.get("metadata", {})
    }
    
    # Update conversation
    conversations[conversation_id]["updated_at"] = datetime.now().isoformat()
    
    logging.info(f"Created message: {message_id} in conversation: {conversation_id}")
    return jsonify(messages[message_id]), 201

@app.route("/api/mcp/v1/conversations/<conversation_id>/messages", methods=["GET"])
def list_messages(conversation_id):
    if conversation_id not in conversations:
        return jsonify({"error": "Conversation not found"}), 404
    
    # Filter messages by conversation_id
    conversation_messages = [msg for msg in messages.values() if msg["conversation_id"] == conversation_id]
    return jsonify(conversation_messages), 200

@app.route("/api/mcp/v1/completions", methods=["POST"])
def create_completion():
    data = request.get_json()
    
    # Validate request
    if "conversation_id" not in data or "messages" not in data:
        return jsonify({"error": "Missing required fields"}), 400
    
    conversation_id = data["conversation_id"]
    if conversation_id not in conversations:
        return jsonify({"error": "Conversation not found"}), 404
    
    # Here you would normally process the messages and generate a response
    # For this demo, we'll just echo back a simple response
    
    message_id = str(uuid.uuid4())
    response_message = {
        "id": message_id,
        "conversation_id": conversation_id,
        "created_at": datetime.now().isoformat(),
        "role": "assistant",
        "content": "This is a simulated response from the MCP server. In a real implementation, this would be generated by an AI model.",
        "metadata": {}
    }
    
    # Store the message
    messages[message_id] = response_message
    
    # Update conversation
    conversations[conversation_id]["updated_at"] = datetime.now().isoformat()
    
    logging.info(f"Created completion message: {message_id} in conversation: {conversation_id}")
    return jsonify(response_message), 201

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000)